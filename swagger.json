{
    "produces": [
        "application/json"
    ],
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is the API of JeLL",
        "title": "JeLL API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:3000",
    "basePath": "/api",
    "paths": {
        "/": {
            "get": {
                "description": "Root of the API server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Root Controller API"
                ],
                "summary": "Root",
                "operationId": "RootController",
                "responses": {
                    "200": {
                        "description": "« KunEngine v2 »",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/chat": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get chats list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Get chats",
                "operationId": "getChats",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Update chat",
                "operationId": "updateChat",
                "parameters": [
                    {
                        "description": "Chat data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Create chat",
                "operationId": "createChat",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/chat/count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get chat count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Get chat count",
                "operationId": "getChatCount",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/chat/not-approved/count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get not approved chats count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Get not approved chats count",
                "operationId": "getNotApprovedChatsCount",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/chat/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get chat by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Get chat by ID",
                "operationId": "getChatByID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Delete chat",
                "operationId": "deleteChat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/chat/{id}/approve": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Approve chat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Approve chat",
                "operationId": "approveChat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/chat/{id}/history": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete chat history",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Delete chat history",
                "operationId": "DeleteChatHistoryController",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/api/chat/{id}/message": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get chat messages",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Chats"
                ],
                "summary": "Get chat messages",
                "operationId": "getChatMessages",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Chat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object"
                        }
                    }
                }
            }
        },
        "/appointment": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "update appointment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Appointment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "create appointment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "CreateAppointment",
                "parameters": [
                    {
                        "description": "Appointment",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Appointment"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Appointment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointment-settings": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all appointment-settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppointmentSetting"
                ],
                "summary": "Get all appointment-settings",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.AppointmentSetting"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create AppointmentSetting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppointmentSetting"
                ],
                "summary": "Create AppointmentSetting",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AppointmentSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AppointmentSetting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointment-settings/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my appointment-setting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppointmentSetting"
                ],
                "summary": "Get my appointment-setting",
                "operationId": "GetMyAppointmentSetting",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AppointmentSetting"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointment-settings/user/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my appointment-setting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppointmentSetting"
                ],
                "summary": "Get user appointment-setting",
                "operationId": "GetAppointmentSettingByUserID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AppointmentSetting"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointment-settings/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get AppointmentSetting by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppointmentSetting"
                ],
                "summary": "Get AppointmentSetting by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "AppointmentSetting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AppointmentSetting"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update AppointmentSetting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppointmentSetting"
                ],
                "summary": "Update AppointmentSetting",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "AppointmentSetting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "AppointmentSetting",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.AppointmentSetting"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.AppointmentSetting"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete AppointmentSetting",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "AppointmentSetting"
                ],
                "summary": "Delete AppointmentSetting",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "AppointmentSetting ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointment/:id": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Appointment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "update appointment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Appointment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointment/availability/partner/{id}/date/{date}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment Date Availability by user_id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment Date Availability",
                "operationId": "GetPartnerDateAvailability",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "partner",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "date",
                        "name": "date",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AvailableHour"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointment/partner/:id": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentsByPartnerID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PartnerID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AppointmentWithUser"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointments": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all Appointments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "operationId": "GetAppointments",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.AppointmentWithUser"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointments/date/:date": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentsByDate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "date",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AppointmentWithUser"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointments/partner/:id/date/:date": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentsByPartnerIDAndDate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PartnerID ND Date",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AppointmentWithUser"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointments/status/:status": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentsByStatus",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "status",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AppointmentWithUser"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointments/user/:id": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentByUserID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Appointment"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointments/user/:id/date/:date": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentsByUserIdAndDate",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserId And Date",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AppointmentWithUser"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/appointments/user/:id/status/:status": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "get appointment by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Appointment"
                ],
                "summary": "Get user appointment",
                "operationId": "GetAppointmentsByUserIDAndStatus",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserId and Status",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.AppointmentWithUser"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/authentication/login": {
            "post": {
                "description": "Login with email and password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Login",
                "operationId": "login",
                "parameters": [
                    {
                        "description": "Create Post Rating",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/authentication.LoginRequestBody"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/authentication.LoginResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/blocks": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all user blocks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Block"
                ],
                "summary": "GetUserBlocks",
                "operationId": "GetUserBlocks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Block"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/blocks/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Block user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Block"
                ],
                "summary": "BlockUser",
                "operationId": "BlockUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unblock user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Block"
                ],
                "summary": "UnblockUser",
                "operationId": "UnblockUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/blocks/{id}/is-blocked": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Check if user is blocked",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Block"
                ],
                "summary": "IsBlockedUser",
                "operationId": "IsBlockedUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/calls": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all calls",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Call"
                ],
                "summary": "Get all calls",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Call"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Call",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Call"
                ],
                "summary": "Create Call",
                "parameters": [
                    {
                        "description": "Call",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.CallCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Call"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/calls/uuid/{uuid}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Call by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Call"
                ],
                "summary": "Get Call by UUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Call UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Call"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/calls/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Call by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Call"
                ],
                "summary": "Get Call by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Call ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Call"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Call",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Call"
                ],
                "summary": "Update Call",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Call ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Call",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Call"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Call"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Call",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Call"
                ],
                "summary": "Delete Call",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Call ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/categories": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get all categories",
                "operationId": "GetCategories",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Category"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Create Category",
                "operationId": "CreateCategory",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/categories/resort": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Resort Categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Resort Categories",
                "operationId": "ResortCategories",
                "parameters": [
                    {
                        "description": "Category IDs",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/categories/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Category by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Get Category by ID",
                "operationId": "GetCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "summary": "Update Category",
                "operationId": "UpdateCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Category"
                ],
                "operationId": "DeleteCategory",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/dashboard": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get the dashboard statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get the dashboard statistics",
                "operationId": "DashboardController",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.Dashboard"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.Error"
                        }
                    }
                }
            }
        },
        "/dashboard/statistics": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get the statistics for the dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get the statistics for the dashboard",
                "operationId": "GetDashboardStatistics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Period",
                        "name": "period",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.DashboardApiRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.Error"
                        }
                    }
                }
            }
        },
        "/dashboard/tables": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get the tables for the dashboard",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Dashboard"
                ],
                "summary": "Get the tables for the dashboard",
                "operationId": "DashboardTables",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Period",
                        "name": "period",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.DashboardTableRes"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.Error"
                        }
                    }
                }
            }
        },
        "/device/toggle-notification-enabled": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Toggle notification enabled",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Device"
                ],
                "summary": "Toggle notification enabled",
                "operationId": "toggleNotificationEnabledDevice",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/device.ToggleResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/devices": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Get all devices",
                "operationId": "GetDevices",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Device"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Create Device",
                "operationId": "CreateDevice",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/devices/my-devices": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all my devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Get all my devices",
                "operationId": "GetMyDevices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Device"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/devices/user/delete": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete all user devices",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Delete all user devices",
                "operationId": "DeleteUserDevices",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/devices/user/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all devices by user ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Get all devices by user ID",
                "operationId": "GetDevicesByUserID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Device"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/devices/uuid/{uuid}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Device by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Get Device by UUID",
                "operationId": "GetDeviceByUUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Save Device by UUID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Save Device by UUID",
                "operationId": "SaveDeviceByUUID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Device UUID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Device",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/devices/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Device by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Get Device by ID",
                "operationId": "GetDevice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Update Device",
                "operationId": "UpdateDevice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Device",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Device"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Device",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Devices"
                ],
                "summary": "Delete Device",
                "operationId": "DeleteDevice",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Device ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/drafts/count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get drafts counter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "drafts"
                ],
                "summary": "Get drafts counter",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.draftCounterResponse"
                        }
                    },
                    "500": {
                        "description": "Server Response",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/event-invitation": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all event-invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EventInvitation"
                ],
                "summary": "Get all event-invitation",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.EventInvitation"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create EventInvitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EventInvitation"
                ],
                "summary": "Create EventInvitation",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.EventInvitation"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EventInvitation"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/event-invitation/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get EventInvitation by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "EventInvitation"
                ],
                "summary": "Get EventInvitation by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "EventInvitation ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.EventInvitation"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/explore": {
            "get": {
                "description": "Get home data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Explore"
                ],
                "summary": "Get home data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.Response"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/feature-flags": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all feature-flags",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FeatureFlag"
                ],
                "summary": "Get all feature-flags",
                "operationId": "GetFeatureFlags",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.FeatureFlag"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create FeatureFlag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FeatureFlag"
                ],
                "summary": "Create FeatureFlag",
                "operationId": "CreateFeatureFlag",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FeatureFlag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.FeatureFlag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/feature-flags/enabled": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Check if a FeatureFlag is enabled by key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FeatureFlag"
                ],
                "summary": "Check if a FeatureFlag is enabled",
                "operationId": "IsFeatureFlagEnabled",
                "parameters": [
                    {
                        "type": "string",
                        "description": "FeatureFlag Key",
                        "name": "key",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "boolean"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/feature-flags/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get FeatureFlag by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FeatureFlag"
                ],
                "summary": "Get FeatureFlag by ID",
                "operationId": "GetFeatureFlag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "FeatureFlag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.FeatureFlag"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update FeatureFlag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FeatureFlag"
                ],
                "summary": "Update FeatureFlag",
                "operationId": "UpdateFeatureFlag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "FeatureFlag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "FeatureFlag",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.FeatureFlag"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.FeatureFlag"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete FeatureFlag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "FeatureFlag"
                ],
                "summary": "Delete FeatureFlag",
                "operationId": "DeleteFeatureFlag",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "FeatureFlag ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/follow/count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user follows and followers count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Follow"
                ],
                "summary": "Get user follows and followers count",
                "operationId": "GetUserFollowsCount",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.GetUserFollowCountResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/follow/followers": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all followers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Follow"
                ],
                "summary": "Get all followers",
                "operationId": "GetUserFollowers",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Follow"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/follow/followers/{followerID}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Remove follower from my followers list",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Follow"
                ],
                "summary": "Remove follower from my followers list",
                "operationId": "RemoveFollowerFromMyFollowersList",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Follower ID",
                        "name": "followerID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/follow/follows": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all follows",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Follow"
                ],
                "summary": "Get all follows",
                "operationId": "GetUserFollows",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Follow"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/follow/publisher/{publisherID}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Follow a publisher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Follow"
                ],
                "summary": "Follow a publisher",
                "operationId": "FollowPublisher",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publisher ID",
                        "name": "publisherID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unfollow a publisher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Follow"
                ],
                "summary": "Unfollow a publisher",
                "operationId": "UnfollowPublisher",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publisher ID",
                        "name": "publisherID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/follow/publisher/{publisherID}/count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get publisher follows and followers count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Follow"
                ],
                "summary": "Get publisher follows and followers count",
                "operationId": "GetPublisherFollowsCount",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publisher ID",
                        "name": "publisherID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.GetUserFollowCountResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/categories": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help categories",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help categories",
                "operationId": "GetHelpCategories",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Category"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create help category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Create help category",
                "operationId": "CreateHelpCategory",
                "parameters": [
                    {
                        "description": "Category",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/categories/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help category",
                "operationId": "GetHelpCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update help category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Update help category",
                "operationId": "UpdateHelpCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Category",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Category"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete help category",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Delete help category",
                "operationId": "DeleteHelpCategory",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Category ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/feedback": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help feedbacks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help feedbacks",
                "operationId": "GetHelpFeedbacks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Feedback"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create help feedback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Create help feedback",
                "operationId": "CreateHelpFeedback",
                "parameters": [
                    {
                        "description": "Feedback",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Feedback"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Feedback"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/feedback/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help feedback",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help feedback",
                "operationId": "GetHelpFeedback",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Feedback ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Feedback"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/tickets": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help tickets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help tickets",
                "operationId": "GetHelpTickets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Ticket"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create help ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Create help ticket",
                "operationId": "CreateHelpTicket",
                "parameters": [
                    {
                        "description": "Ticket",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/tickets/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help user tickets",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help user tickets",
                "operationId": "GetHelpUserTickets",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Ticket"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/tickets/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help ticket",
                "operationId": "GetHelpTicket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update help ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Update help ticket",
                "operationId": "UpdateHelpTicket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ticket",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Ticket"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete help ticket",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Delete help ticket",
                "operationId": "DeleteHelpTicket",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/tickets/{id}/replies": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help ticket replies",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help ticket replies",
                "operationId": "GetHelpTicketReplies",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.TicketReplay"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create help ticket reply",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Create help ticket reply",
                "operationId": "CreateHelpTicketReply",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ticket Reply",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TicketReplay"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TicketReplay"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/tickets/{id}/replies/{replyID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help ticket reply",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help ticket reply",
                "operationId": "GetHelpTicketReply",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ticket Reply ID",
                        "name": "replyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TicketReplay"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update help ticket reply",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Update help ticket reply",
                "operationId": "UpdateHelpTicketReply",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ticket Reply ID",
                        "name": "replyID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Ticket Reply",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TicketReplay"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.TicketReplay"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete help ticket reply",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Delete help ticket reply",
                "operationId": "DeleteHelpTicketReply",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticket ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ticket Reply ID",
                        "name": "replyID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/topic": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help topics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help topics",
                "operationId": "GetHelpTopics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/models.Topic"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create help topic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Create help topic",
                "operationId": "CreateHelpTopic",
                "parameters": [
                    {
                        "description": "Topic",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Topic"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Topic"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/help/topic/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get help topic",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Help"
                ],
                "summary": "Get help topic",
                "operationId": "GetHelpTopic",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Topic ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/models.Topic"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/insight": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Fetch insight data by id and type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "insights"
                ],
                "summary": "Fetch insight data",
                "operationId": "fetchInsightData",
                "parameters": [
                    {
                        "description": "Insight Request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/apis.fetchInsightRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Server Response",
                        "schema": {
                            "$ref": "#/definitions/apis.fetchInsightResponse"
                        }
                    },
                    "400": {
                        "description": "Server Response",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/issues": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all issues",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issue"
                ],
                "summary": "Get all issues",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Issue"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Issue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issue"
                ],
                "summary": "Create Issue",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Issue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Issue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/issues/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Issue by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issue"
                ],
                "summary": "Get Issue by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Issue"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Issue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issue"
                ],
                "summary": "Update Issue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Issue",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Issue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Issue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Issue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Issue"
                ],
                "summary": "Delete Issue",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Issue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/keyvalue": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves all KeyValues from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Get all KeyValues",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.KeyValue"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "update KeyValue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Get KeyValue",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.KeyValue"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create KeyValue",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Create KeyValue",
                "operationId": "CreateKeyValue",
                "parameters": [
                    {
                        "description": "KeyValue object",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.KeyValue"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.KeyValue"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "delete all KeyValues from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Delete all KeyValues",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/keyvalue/prefix": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Deletes KeyValues that start with the specified prefix",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Delete KeyValues with prefix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix to delete",
                        "name": "prefix",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/keyvalue/prefix-suffix": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Deletes KeyValues that start with the specified prefix and end with the specified suffix",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Delete KeyValues with prefix and suffix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix to delete",
                        "name": "prefix",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Suffix to delete",
                        "name": "suffix",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/keyvalue/prefix/:prefix": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves KeyValues that start with the specified prefix",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Get KeyValues with prefix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix to search",
                        "name": "prefix",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.KeyValue"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/keyvalue/prefix/:prefix/suffix/:suffix": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves KeyValues that start with the specified prefix and end with the specified suffix",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Get KeyValues with prefix and suffix",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Prefix to search",
                        "name": "prefix",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Suffix to search",
                        "name": "suffix",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.KeyValue"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/keyvalue/{id}": {
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete KeyValue by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Delete KeyValue",
                "operationId": "Delete",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "KeyValue ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/keyvalue/{key}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieves KeyValues that match the specified language and key",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "KeyValue"
                ],
                "summary": "Get KeyValues by language and key",
                "parameters": [
                    {
                        "type": "string",
                        "description": "KeyValue key",
                        "name": "key",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Language code",
                        "name": "lang",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.KeyValue"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/gin.H"
                        }
                    }
                }
            }
        },
        "/logs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Logs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Get Logs",
                "operationId": "GetLogs",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Log"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Log",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Create Log",
                "operationId": "CreateLog",
                "parameters": [
                    {
                        "description": "Log",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Log"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Log"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/logs/:id": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Log",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Update Log",
                "operationId": "UpdateLog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Log",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Log"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Log"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/logs/country/{country}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Logs By Country",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Get Logs By Country",
                "operationId": "GetLogByCountry",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Country",
                        "name": "country",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Log"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/logs/post/{postID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Logs By PostID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Get Logs By PostID",
                "operationId": "GetLogByPostID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostID",
                        "name": "postID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Log"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/logs/type/{type}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Logs By Type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Get Logs By Type",
                "operationId": "GetLogByType",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Log Type",
                        "name": "type",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Log"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/logs/user/{userID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Logs By UserID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Get Logs By UserID",
                "operationId": "GetLogByUserID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserID",
                        "name": "userID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Log"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/logs/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Logs By ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "summary": "Get Logs By ID",
                "operationId": "GetLogByID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Log"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Log",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Log"
                ],
                "operationId": "DeleteLog",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Log ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/mailing": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Mailings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailings"
                ],
                "summary": "Get Mailings",
                "operationId": "GetMailings",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Mailing"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Mailing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailings"
                ],
                "summary": "Update Mailing",
                "operationId": "UpdateMailing",
                "parameters": [
                    {
                        "description": "Mailing",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Mailing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Mailing"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Mailing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailings"
                ],
                "summary": "Create Mailing",
                "operationId": "CreateMailing",
                "parameters": [
                    {
                        "description": "Mailing",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Mailing"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Mailing"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/mailing/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Mailing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailings"
                ],
                "summary": "Get Mailing",
                "operationId": "GetMailing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mailing ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Mailing"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Mailing",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mailings"
                ],
                "summary": "Delete Mailing",
                "operationId": "DeleteMailing",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Mailing ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/mutes": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all mutes",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mute"
                ],
                "summary": "Get all mutes",
                "operationId": "GetUserMutes",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Mute"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/mutes/{publisherID}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mute User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mute"
                ],
                "summary": "Mute User",
                "operationId": "MuteUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "publisherID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "Message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unmute User",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Mute"
                ],
                "summary": "Unmute User",
                "operationId": "UnmuteUser",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "publisherID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/delete-notification/{notificationID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Delete notification",
                "operationId": "DeleteNotificationController",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "notificationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/mark-all-as-read": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Mark all notifications as read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Mark all notifications as read",
                "operationId": "MarkAllAsRead",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/my-notifications-count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user notifications count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get user notifications count",
                "operationId": "GetUserNotificationsCountController",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/my-notifications/{deviceID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all user notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get all user notifications",
                "operationId": "GetUserNotifications",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Device ID",
                        "name": "deviceID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notify.UserNotification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/my-notifications/{notificationID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a user notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get a user notification",
                "operationId": "GetUserNotification",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "notificationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/notify.UserNotification"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/my-unread-notifications": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all user unread notifications",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get all user unread notifications",
                "operationId": "GetUserUnreadNotificationsController",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/notify.UserNotification"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/my-unread-notifications-count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user unread notifications count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Get user unread notifications count",
                "operationId": "IsUserHasUnreadNotificationController",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/read-notification/{notificationID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Set notification as read",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Set notification as read",
                "operationId": "SetNotificationAsReadController",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Notification ID",
                        "name": "notificationID",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/notifications/send-notification": {
            "post": {
                "description": "Send notification",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Notifications"
                ],
                "summary": "Send notification",
                "operationId": "SendNotificationController",
                "parameters": [
                    {
                        "description": "Notification",
                        "name": "notification",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/notify.Notification"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/pinned-chat/{id}/is-pinned": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Is pinned",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PinChat"
                ],
                "summary": "Is pinned",
                "operationId": "IsPinned",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PinChat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/pinned-chats": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all pinned-chats",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PinChat"
                ],
                "summary": "Get all pinned-chats",
                "operationId": "GetPinChats",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.PinChat"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create PinChat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PinChat"
                ],
                "summary": "Create PinChat",
                "operationId": "CreatePinChat",
                "parameters": [
                    {
                        "description": "PinChat",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PinChat"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PinChat"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/pinned-chats/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get PinChat by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PinChat"
                ],
                "summary": "Get PinChat by ID",
                "operationId": "GetPinChat",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PinChat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PinChat"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update PinChat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PinChat"
                ],
                "summary": "Update PinChat",
                "operationId": "UpdatePinChat",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PinChat ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PinChat",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PinChat"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PinChat"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete PinChat",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PinChat"
                ],
                "summary": "Delete PinChat",
                "operationId": "DeletePinChat",
                "parameters": [
                    {
                        "type": "string",
                        "description": "PinChat ChatID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostCard"
                ],
                "summary": "Get all post",
                "operationId": "FindPosts",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.PostCard"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post-reading-time": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Save the user post reading time",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostReadingTime"
                ],
                "summary": "Save the user post reading time",
                "operationId": "SaveUserPostReadingTime",
                "parameters": [
                    {
                        "description": "Post Reading Time",
                        "name": "postReadingTime",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostReadingTimeCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostReadingTime"
                        }
                    }
                }
            }
        },
        "/post-reporting": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Post Reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostReporting"
                ],
                "summary": "Get Post Reports",
                "operationId": "GetPostReports",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.PostReport"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update PostReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostReporting"
                ],
                "summary": "Update PostReport",
                "operationId": "UpdatePostReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PostReport",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create PostReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostReporting"
                ],
                "summary": "Create PostReport",
                "operationId": "CreatePostReport",
                "parameters": [
                    {
                        "description": "PostReport",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post-reporting/post-id/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Post Report by PostID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostReporting"
                ],
                "summary": "Get Post Report by PostID",
                "operationId": "GetPostReportByPostID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostReport"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post-reporting/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Post Report by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostReporting"
                ],
                "summary": "Get Post Report by ID",
                "operationId": "GetPostReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostReport"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete PostReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostReporting"
                ],
                "operationId": "DeletePostReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post/highlight": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all post-heightlights",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostHeighlight"
                ],
                "summary": "Get all post-heightlights",
                "operationId": "GetPostHeighlights",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.PostHeighlight"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create PostHeighlight",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostHeighlight"
                ],
                "summary": "Create PostHeighlight",
                "operationId": "CreatePostHeighlight",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostHeighlight"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostHeighlight"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post/highlight/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get PostHeighlight by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostHeighlight"
                ],
                "summary": "Get PostHeighlight by ID",
                "operationId": "GetPostHeighlight",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostHeighlight ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostHeighlight"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update PostHeighlight",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostHeighlight"
                ],
                "summary": "Update PostHeighlight",
                "operationId": "UpdatePostHeighlight",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostHeighlight ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "PostHeighlight",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.PostHeighlight"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.PostHeighlight"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete PostHeighlight",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostHeighlight"
                ],
                "summary": "Delete PostHeighlight",
                "operationId": "DeletePostHeighlight",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "PostHeighlight ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post/publisher/{publisherID}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all post by publisher",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostCard"
                ],
                "summary": "Get all post by publisher",
                "operationId": "GetPublisherPosts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publisher ID",
                        "name": "publisherID",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.PostCard"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post/recommended": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get recommended posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostCard"
                ],
                "summary": "Get recommended posts",
                "operationId": "GetRecommendedPosts",
                "parameters": [
                    {
                        "type": "string",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.PostCard"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/post/{id}/highlight": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all user post-heightlights",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PostHeighlight"
                ],
                "summary": "Get all user post-heightlights",
                "operationId": "GetUserPostHeighlights",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.PostHeighlight"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get posts with the input payload as JSON query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get posts",
                "operationId": "GetPosts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Single category ID",
                        "name": "filter_category_id",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Slice of post languages",
                        "name": "filter_post_between_date",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Single post ID",
                        "name": "filter_post_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Slice of post IDs",
                        "name": "filter_post_ids[]",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "filter post is reported (1, 2, or 3)",
                        "name": "filter_post_is_reported",
                        "in": "query"
                    },
                    {
                        "enum": [
                            0,
                            1
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "LanguageEnglish",
                            "LanguageArabic"
                        ],
                        "description": "Single post language",
                        "name": "filter_post_language",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "enum": [
                                0,
                                1
                            ],
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Slice of post languages",
                        "name": "filter_post_languages_in",
                        "in": "query"
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "StatusDraft",
                            "StatusPublished",
                            "StatusDeleted",
                            "StatusArchived"
                        ],
                        "description": "Single post status",
                        "name": "filter_post_status",
                        "in": "query"
                    },
                    {
                        "enum": [
                            0,
                            1,
                            2
                        ],
                        "type": "integer",
                        "x-enum-varnames": [
                            "PostTypeArticle",
                            "PostTypeVideo",
                            "PostTypeAudio"
                        ],
                        "description": "Single post type",
                        "name": "filter_post_type",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Slice of post statuses",
                        "name": "filter_posts_status_in",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Slice of tags",
                        "name": "filter_tags[]",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Single user ID",
                        "name": "filter_user_id",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "Slice of user IDs",
                        "name": "filter_user_ids[]",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page number",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search post body",
                        "name": "search_post_body",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search post tags",
                        "name": "search_post_tags",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search post title",
                        "name": "search_post_title",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search post title or body",
                        "name": "search_post_title_or_body",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page size",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort by",
                        "name": "sort_by",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Sort order",
                        "name": "sort_order",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "With full data",
                        "name": "with_full_data",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "With full search",
                        "name": "with_full_search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "With my posts",
                        "name": "with_my_posts",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "With published",
                        "name": "with_published",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "With random",
                        "name": "with_random",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "With simplified data",
                        "name": "with_simplified_data",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "With user search",
                        "name": "with_user_search",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "without_blocked_user",
                        "name": "without_blocked_user",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Without my posts",
                        "name": "without_my_posts",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/posts.PostResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/archive": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my archive",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get my archive",
                "operationId": "GetMyArchive",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.Post"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/body/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get post body with the input ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get post body",
                "operationId": "GetPostBody",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/bookmark/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Bookmark a post by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Post bookmark",
                "operationId": "SaveBookmark",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a post bookmark by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Delete post bookmark",
                "operationId": "DeleteBookmark",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/bookmarks": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my bookmarks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get my bookmarks",
                "operationId": "GetMyBookmarks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.PostWithFullData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/drafts": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my drafts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get my drafts",
                "operationId": "GetMyDrafts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.Post"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a draft with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Update a draft",
                "operationId": "UpdateDraft",
                "parameters": [
                    {
                        "description": "Post Update",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/posts.PostUpdateType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Save a new draft with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Save a new draft",
                "operationId": "SaveDraft",
                "parameters": [
                    {
                        "description": "Post Creation",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/posts.PostCreationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/drafts/count": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get the number of drafts of the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get the number of drafts of the user",
                "operationId": "GetDraftCount",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/drafts/{id}": {
            "delete": {
                "description": "Delete a draft with the input ID as parameter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Delete a draft",
                "operationId": "DeleteDraft",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/my": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get my posts",
                "operationId": "GetMyPosts",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.PostWithFullData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/preview/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Preview post with the input post id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Preview post",
                "operationId": "PreviewPost",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/posts.PostWithFullData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/published": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a published post with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Update a published post",
                "operationId": "UpdatePost",
                "parameters": [
                    {
                        "description": "Post Update",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/posts.PostUpdateType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/posts.Post"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new published post with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Create a new published post",
                "operationId": "SavePost",
                "parameters": [
                    {
                        "description": "Post Creation",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/posts.PostCreationType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.Post"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/published/{id}": {
            "delete": {
                "description": "Delete a published post with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Delete a published post",
                "operationId": "DeletePost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/rate": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Save post rating with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Save post rating",
                "operationId": "SavePostRating",
                "parameters": [
                    {
                        "description": "Create Post Rating",
                        "name": "post",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/posts.PostRatingSaveType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/similar/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get similar posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get similar posts",
                "operationId": "SimilarPosts",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.PostWithFullData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/statistics": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Post"
                ],
                "summary": "Get statistics",
                "operationId": "getStatistics",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Statistics",
                        "name": "statistics",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/status/{id}/{status}": {
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Change post status",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Change post status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "enum": [
                            "0",
                            "1",
                            "2",
                            "3"
                        ],
                        "type": "string",
                        "description": "Post status",
                        "name": "status",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/tags/{tag}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Fetch posts by tag",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Fetch posts by tag",
                "operationId": "fetchPostsByTag",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Tag",
                        "name": "tag",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.Post"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/user/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user posts",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get user posts",
                "operationId": "GetUserPosts",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/posts.PostWithFullData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/view/{id}": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Save post view with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Save post view",
                "operationId": "SavePostView",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get post with the input ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Get post",
                "operationId": "GetPost",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/posts.PostWithFullData"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/posts/{id}/pin": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create pin to top post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Create a pin to top post",
                "operationId": "AddPinToTop",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.Post"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Remove pin to top post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Posts"
                ],
                "summary": "Remove a pin to top post",
                "operationId": "RemovePinToTop",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Post ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "$ref": "#/definitions/posts.Post"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/product": {
            "get": {
                "description": "Get products list with pagination",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Get products",
                "operationId": "GetProducts",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/product.Product"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a product with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProductAPI"
                ],
                "summary": "Update a product",
                "operationId": "updateProduct",
                "parameters": [
                    {
                        "description": "Product",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "description": "Create product with the data given",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Products"
                ],
                "summary": "Create product",
                "operationId": "CreateProduct",
                "parameters": [
                    {
                        "description": "Product",
                        "name": "product",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/product/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProductAPI"
                ],
                "summary": "Get a product",
                "operationId": "getProduct",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a product by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "ProductAPI"
                ],
                "summary": "Delete a product",
                "operationId": "deleteProduct",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/product.Product"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get programs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get programs",
                "operationId": "GetPrograms",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Program"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Update program",
                "operationId": "UpdateProgram",
                "parameters": [
                    {
                        "description": "Program",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Program"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Program"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Create program",
                "operationId": "CreateProgram",
                "parameters": [
                    {
                        "description": "Program",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Program"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Program"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/bookmarks": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my bookmarks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get my bookmarks",
                "operationId": "GetMyProgramsBookmarks",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Program"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/bookmarks/ids": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my bookmark IDs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get my bookmark IDs",
                "operationId": "GetMyBookmarkIDs",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/draft": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my drafts programs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get my drafts programs",
                "operationId": "GetMyProgramsDraft",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Program"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Saves a new program draft or updates an existing one based on the presence of an ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Save or update a program draft",
                "operationId": "SaveOrUpdateDraft",
                "parameters": [
                    {
                        "description": "Program Draft",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Program"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Program"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/my-programs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my programs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get my programs",
                "operationId": "GetMyPrograms",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Program"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/user/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get publisher programs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get publisher programs",
                "operationId": "GetPublisherPrograms",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Publisher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Program"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get program",
                "operationId": "GetProgram",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.getProgramResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Delete program",
                "operationId": "DeleteProgram",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/{id}/bookmark": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Bookmark program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Bookmark program",
                "operationId": "BookmarkProgram",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "UnBookmark program",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "UnBookmark program",
                "operationId": "UnBookmarkProgram",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseSuccess"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/program/{id}/is-bookmarked": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Is bookmarked",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Is bookmarked",
                "operationId": "IsBookmarked",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Program ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/publishers": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all publishers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publisher"
                ],
                "summary": "Get all publishers",
                "operationId": "GetPublishers",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Publisher"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/publishers/search": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Search publishers by keyword",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publisher"
                ],
                "summary": "Search publishers by keyword",
                "operationId": "SearchPublishers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Keyword",
                        "name": "keyword",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Publisher"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/publishers/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Publisher by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publisher"
                ],
                "summary": "Get Publisher by ID",
                "operationId": "GetPublisher",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Publisher ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.PublisherResponse"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/reports": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Get all reports",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Report"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Create Report",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Report"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/reports/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Report by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Get Report by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Report"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Update Report",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Report",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Report"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Report"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Report",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Report"
                ],
                "summary": "Delete Report",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Report ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seed-reporting": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Seed Reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedReporting"
                ],
                "summary": "Get Seed Reports",
                "operationId": "GetSeedReports",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.SeedReport"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update SeedReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedReporting"
                ],
                "summary": "Update SeedReport",
                "operationId": "UpdateSeedReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SeedReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SeedReport",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SeedReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create SeedReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedReporting"
                ],
                "summary": "Create SeedReport",
                "operationId": "CreateSeedReport",
                "parameters": [
                    {
                        "description": "SeedReport",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SeedReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seed-reporting/seed-id/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Seed Report by SeedID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedReporting"
                ],
                "summary": "Get Seed Report by SeedID",
                "operationId": "GetSeedReportBySeedID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SeedReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedReport"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seed-reporting/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Seed Report by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedReporting"
                ],
                "summary": "Get Seed Report by ID",
                "operationId": "GetSeedReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SeedReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedReport"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete SeedReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedReporting"
                ],
                "operationId": "DeleteSeedReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SeedReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seed_guidelines": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all seed_guidelines",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedGuideline"
                ],
                "summary": "Get all seed_guidelines",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.SeedGuideline"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create SeedGuideline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedGuideline"
                ],
                "summary": "Create SeedGuideline",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SeedGuideline"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedGuideline"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seed_guidelines/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get SeedGuideline by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedGuideline"
                ],
                "summary": "Get SeedGuideline by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SeedGuideline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedGuideline"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update SeedGuideline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedGuideline"
                ],
                "summary": "Update SeedGuideline",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SeedGuideline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "SeedGuideline",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SeedGuideline"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedGuideline"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete SeedGuideline",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "SeedGuideline"
                ],
                "summary": "Delete SeedGuideline",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "SeedGuideline ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all seeds",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Get all seeds",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Seed"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Seed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Create Seed",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SeedCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Seed"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/bookmarks": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Bookmarked Seeds",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Get Bookmarked Seeds",
                "operationId": "getBookmarkedSeeds",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Seed"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/draft": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my drafts seeds",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seeds"
                ],
                "summary": "Get my drafts seeds",
                "operationId": "GetMySeedsDraft",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Seed"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Saves a new seed draft or updates an existing one based on the presence of an ID.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seeds"
                ],
                "summary": "Save or update a seed draft",
                "operationId": "SaveOrUpdateSeedDraft",
                "parameters": [
                    {
                        "description": "Seed Draft",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Seed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Seed"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/list": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Seed List",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Get Seed List",
                "operationId": "GetSeedsList",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.Seed"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/my-seeds": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get my seeds",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Get my seeds",
                "operationId": "GetMySeeds",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Seed"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/not-interested": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all not-interested",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NotInterestedSeed"
                ],
                "summary": "Get all not-interested",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.NotInterestedSeed"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/user/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Find Seed by User ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Find Seed by User ID",
                "operationId": "FindSeedByUserID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Seed"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Seed by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Get Seed by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Seed"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update Seed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Update Seed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.Seed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedUpdate"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete Seed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Delete Seed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/{id}/bookmark": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Bookmark Seed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Bookmark Seed",
                "operationId": "bookmarkSeed",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unbookmark Seed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Unbookmark Seed",
                "operationId": "unbookmarkSeed",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/{id}/comments": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Seed Comments",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Get Seed Comments",
                "operationId": "getSeedComments",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.SeedComment"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create Seed Comment",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Create Seed Comment",
                "operationId": "createSeedComment",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Comment",
                        "name": "comment",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.SeedCommentCreate"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedComment"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/{id}/like": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Like Seed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Like Seed",
                "operationId": "likeSeed",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Unlike Seed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Unlike Seed",
                "operationId": "unlikeSeed",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/{id}/likers": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get Seed Likes Users",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Get Seed Likes Users Information",
                "operationId": "GetSeedLikesUsers",
                "parameters": [
                    {
                        "type": "number",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/{id}/not-interested": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get NotInterestedSeed by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NotInterestedSeed"
                ],
                "summary": "Get NotInterestedSeed by ID",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "NotInterestedSeed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NotInterestedSeed"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update NotInterestedSeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NotInterestedSeed"
                ],
                "summary": "Update NotInterestedSeed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "NotInterestedSeed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "NotInterestedSeed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.NotInterestedSeed"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NotInterestedSeed"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create NotInterestedSeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NotInterestedSeed"
                ],
                "summary": "Create NotInterestedSeed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.NotInterestedSeed"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete NotInterestedSeed",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "NotInterestedSeed"
                ],
                "summary": "Delete NotInterestedSeed",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "NotInterestedSeed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/seeds/{id}/views": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create SeedView",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Seed"
                ],
                "summary": "Create SeedView",
                "operationId": "createSeedView",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Seed ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.SeedView"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/templates": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all templates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Templates"
                ],
                "summary": "Get all templates",
                "operationId": "getTemplates",
                "responses": {
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/top": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Returns the top 5 publishers based on their total number of post views and average post",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Publishers"
                ],
                "summary": "Returns the top 5 publishers based on their total number of post views and",
                "operationId": "getTopPublishers",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Publisher"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/upload": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Upload a file to the server and save the details in the database",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Asset"
                ],
                "summary": "Upload a file",
                "operationId": "UploadFile",
                "parameters": [
                    {
                        "type": "file",
                        "description": "File to upload",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Target path to upload the file",
                        "name": "target",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.Asset"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/user": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get users with the input payload as JSON query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "Get users",
                "operationId": "getUsers",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "desc",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/user.User"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update a user with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "Update a user",
                "operationId": "updateUser",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user-reporting": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get User Reports",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserReporting"
                ],
                "summary": "Get User Reports",
                "operationId": "GetUserReports",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.UserReport"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update UserReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserReporting"
                ],
                "summary": "Update UserReport",
                "operationId": "UpdateUserReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UserReport",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create UserReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserReporting"
                ],
                "summary": "Create UserReport",
                "operationId": "CreateUserReport",
                "parameters": [
                    {
                        "description": "UserReport",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserReport"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserReport"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user-reporting/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get User Report by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserReporting"
                ],
                "summary": "Get User Report by ID",
                "operationId": "GetUserReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserReport"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete UserReport",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserReporting"
                ],
                "operationId": "DeleteUserReport",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserReport ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user-settings": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get all user-settings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSettings"
                ],
                "summary": "Get all user-setting",
                "operationId": "GetUserSettings",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Exclude is to exclude of the query",
                        "name": "exclude[]",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Fields is the fields of the query",
                        "name": "fields",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Filters is the filters of the query",
                        "name": "filters[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "GroupBy is the group by of the query",
                        "name": "groupBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Include is to include of the query",
                        "name": "include",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Joins is the joins of the query",
                        "name": "joins",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Limit is the limit of the query",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset is the offset of the query",
                        "name": "offset",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "OnlyTrashed is the only trashed of the query",
                        "name": "onlyTrashed",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Order is the order of the query",
                        "name": "order",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "OrderBy is the order by of the query",
                        "name": "orderBy",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Page is the page of the query",
                        "name": "page",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "Relations is the relations of the query",
                        "name": "relations",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "Search is the search of the query",
                        "name": "search",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchBy is the search by of the query",
                        "name": "searchBy",
                        "in": "query"
                    },
                    {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "collectionFormat": "csv",
                        "description": "SearchByFields is the search by of the query",
                        "name": "searchByFields[]",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "description": "SearchUserPartner used in appointments portal",
                        "name": "searchByUserPartner",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Size is the size of the query",
                        "name": "size",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "WithTrashed is the with trashed of the query",
                        "name": "withTrashed",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/payload.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "data": {
                                            "type": "array",
                                            "items": {
                                                "$ref": "#/definitions/model.UserSettings"
                                            }
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create UserSettings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSettings"
                ],
                "summary": "Create UserSettings",
                "operationId": "CreateUserSettings",
                "parameters": [
                    {
                        "description": "Seed",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserSettings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user-settings/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get UserSettings by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSettings"
                ],
                "summary": "Get UserSettings by ID",
                "operationId": "GetUserSetting",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserSettings ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserSettings"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update UserSettings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSettings"
                ],
                "summary": "Update UserSettings",
                "operationId": "UpdateUserSettings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserSettings ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "UserSettings",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/model.UserSettings"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/model.UserSettings"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete UserSettings",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserSettings"
                ],
                "operationId": "DeleteUserSettings",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "UserSettings ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "allOf": [
                                {
                                    "$ref": "#/definitions/apis.ServerResponseSuccess"
                                },
                                {
                                    "type": "object",
                                    "properties": {
                                        "message": {
                                            "type": "string"
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user/by-ids": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get users by a list of user IDs passed as URL parameters",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "Get users by IDs",
                "operationId": "getUsersByIDs",
                "parameters": [
                    {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        },
                        "collectionFormat": "csv",
                        "description": "User IDs to fetch",
                        "name": "ids",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of users",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/user.User"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user/statistics": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user statistics",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "Get user statistics",
                "operationId": "getUserStatistics",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "Get a user",
                "operationId": "getUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a user with the input payload as JSON",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "Create a user",
                "operationId": "createUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a user by ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "Delete a user",
                "operationId": "deleteUser",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/user/{id}/{action}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Perform an action on the user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "UserAPI"
                ],
                "summary": "User action route",
                "operationId": "UserActionRoute",
                "parameters": [
                    {
                        "type": "string",
                        "description": "ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Action",
                        "name": "action",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/payload.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/users/{id}/programs": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Get user programs",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Programs"
                ],
                "summary": "Get user programs",
                "operationId": "GetUserPrograms",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/model.Program"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.ServerResponseError"
                        }
                    }
                }
            }
        },
        "/video-call/token": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a video call token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Video Call"
                ],
                "summary": "Create a video call token",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/apis.createVideoCallTokenRequest"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/apis.createVideoCallTokenRequest"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "apis.Dashboard": {
            "type": "object",
            "properties": {
                "total_partner": {
                    "type": "integer"
                },
                "total_post": {
                    "type": "integer"
                },
                "total_user": {
                    "type": "integer"
                }
            }
        },
        "apis.DashboardApiRes": {
            "type": "object",
            "properties": {
                "credit_purchase": {
                    "$ref": "#/definitions/apis.DashboardField"
                },
                "credit_redemptions": {
                    "$ref": "#/definitions/apis.DashboardField"
                },
                "partner_requests": {
                    "$ref": "#/definitions/apis.DashboardField"
                },
                "post_publish": {
                    "$ref": "#/definitions/apis.DashboardField"
                },
                "published_posts": {
                    "type": "integer"
                },
                "total_partners": {
                    "type": "integer"
                },
                "total_users": {
                    "type": "integer"
                }
            }
        },
        "apis.DashboardField": {
            "type": "object",
            "properties": {
                "change": {
                    "type": "number"
                },
                "current": {
                    "type": "integer"
                },
                "previous": {
                    "type": "integer"
                }
            }
        },
        "apis.DashboardTableRes": {
            "type": "object",
            "properties": {
                "app_activity": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "integer"
                            },
                            "date": {
                                "type": "string"
                            }
                        }
                    }
                },
                "countries": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "count": {
                                "type": "integer"
                            },
                            "country_iso": {
                                "type": "string"
                            }
                        }
                    }
                },
                "partner_requests": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/user.User"
                    }
                },
                "top_publishers": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "ID": {
                                "type": "integer"
                            },
                            "avatar": {
                                "type": "string"
                            },
                            "first_name": {
                                "type": "string"
                            },
                            "last_name": {
                                "type": "string"
                            },
                            "ratings": {
                                "type": "number"
                            },
                            "username": {
                                "type": "string"
                            },
                            "views": {
                                "type": "integer"
                            }
                        }
                    }
                }
            }
        },
        "apis.Error": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "apis.GetUserFollowCountResponse": {
            "type": "object",
            "properties": {
                "followersCount": {
                    "type": "integer"
                },
                "followsCount": {
                    "type": "integer"
                }
            }
        },
        "apis.PublisherResponse": {
            "type": "object",
            "properties": {
                "appointmentSettings": {
                    "$ref": "#/definitions/model.AppointmentSetting"
                },
                "followersCount": {
                    "type": "integer"
                },
                "followsCount": {
                    "type": "integer"
                },
                "postsCount": {
                    "type": "integer"
                },
                "publisher": {
                    "$ref": "#/definitions/model.Publisher"
                },
                "userSettings": {
                    "$ref": "#/definitions/model.UserSettings"
                }
            }
        },
        "apis.Response": {
            "type": "object",
            "properties": {
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Category"
                    }
                },
                "publisher": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Publisher"
                    }
                },
                "recentPosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PostCard"
                    }
                },
                "recentPrograms": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Program"
                    }
                },
                "recommendedPosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PostCard"
                    }
                },
                "trendingPost": {
                    "$ref": "#/definitions/model.PostCard"
                },
                "trendingPosts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PostCard"
                    }
                }
            }
        },
        "apis.ServerResponseError": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "msg": {
                    "type": "string"
                }
            }
        },
        "apis.ServerResponseSuccess": {
            "type": "object",
            "properties": {
                "data": {},
                "message": {
                    "type": "string"
                }
            }
        },
        "apis.createVideoCallTokenRequest": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "apis.draftCounterResponse": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "integer"
                },
                "programs": {
                    "type": "integer"
                },
                "seeds": {
                    "type": "integer"
                },
                "total": {
                    "type": "integer"
                }
            }
        },
        "apis.fetchInsightRequest": {
            "type": "object",
            "properties": {
                "id": {
                    "description": "ID is the id of the data to fetch",
                    "type": "integer"
                },
                "type": {
                    "description": "Type is the type of data to fetch // post, program",
                    "type": "string"
                }
            }
        },
        "apis.fetchInsightResponse": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "description": "CreatedAt is the time the post or program was created",
                    "type": "string"
                },
                "average_reading_time": {
                    "description": "AverageReadingTime is the average reading time of the post for all users",
                    "type": "number"
                },
                "comment_count": {
                    "description": "CommentCount is the number of comments on the post or program",
                    "type": "integer"
                },
                "countries": {
                    "description": "Countries is the list of countries and their view count",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/apis.insightCountries"
                    }
                },
                "description": {
                    "description": "Description is the description of the post or program",
                    "type": "string"
                },
                "duration": {
                    "description": "Duration is the duration of the program",
                    "type": "integer"
                },
                "loved_count": {
                    "description": "LovedCount is the number of times the post or program has been loved",
                    "type": "integer"
                },
                "rating": {
                    "description": "Rating is the rating of the post or program",
                    "type": "integer"
                },
                "rating_count": {
                    "description": "RatingCount is the number of ratings",
                    "type": "integer"
                },
                "reading_time": {
                    "description": "ReadingTime is the reading time of the post",
                    "type": "integer"
                },
                "saved_count": {
                    "description": "SavedCount is the number of times the post or program has been saved",
                    "type": "integer"
                },
                "seed_link": {
                    "description": "SeedLink is the link to the seed",
                    "type": "string"
                },
                "seed_thumb": {
                    "description": "SeedThumb is the thumb of the seed",
                    "type": "string"
                },
                "shared_count": {
                    "description": "SharedCount is the number of times the post or program has been shared",
                    "type": "integer"
                },
                "title": {
                    "description": "Title is the title of the post or program",
                    "type": "string"
                },
                "total_reading_time": {
                    "description": "TotalReadingTime is the total reading time of the post for all users",
                    "type": "integer"
                },
                "view_count": {
                    "description": "ViewCount is the number of views",
                    "type": "integer"
                }
            }
        },
        "apis.getProgramResponse": {
            "type": "object",
            "properties": {
                "posts": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.PostCard"
                    }
                },
                "program": {
                    "$ref": "#/definitions/model.Program"
                }
            }
        },
        "apis.insightCountries": {
            "type": "object",
            "properties": {
                "country": {
                    "description": "Country is the name of the country",
                    "type": "string"
                },
                "view_count": {
                    "description": "ViewCount is the number of views from the country",
                    "type": "integer"
                }
            }
        },
        "authentication.LoginRequestBody": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "authentication.LoginResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/user.User"
                }
            }
        },
        "category.Asset": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "string"
                },
                "blurhash": {
                    "type": "string"
                },
                "url": {
                    "type": "string"
                }
            }
        },
        "category.Category": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "asset": {
                    "$ref": "#/definitions/category.Asset"
                },
                "cover": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "isFollowed": {
                    "type": "boolean"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/languages.Language"
                    }
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "device.ToggleResponse": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                }
            }
        },
        "gin.H": {
            "type": "object",
            "additionalProperties": {}
        },
        "gorm.DeletedAt": {
            "type": "object",
            "properties": {
                "time": {
                    "type": "string"
                },
                "valid": {
                    "description": "Valid is true if Time is not NULL",
                    "type": "boolean"
                }
            }
        },
        "languages.Language": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "key": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "record_id": {
                    "type": "integer"
                },
                "table_key": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.Appointment": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "appointment_date": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "partner_id": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "description": "1= active 2 = inactive",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.appointmentStatus"
                        }
                    ]
                },
                "time": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.AppointmentSetting": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "available_days": {
                    "description": "AvailableDays is the available days of the appointment",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.AvailableDays"
                        }
                    ]
                },
                "buffer_time": {
                    "description": "BufferTime is the buffer time between the appointments",
                    "type": "integer"
                },
                "daily_limit": {
                    "description": "DailyLimit is the daily limit of the appointments",
                    "type": "integer"
                },
                "date_range": {
                    "description": "DateRange is the date range how many days the user can book the appointment",
                    "type": "integer"
                },
                "duration": {
                    "description": "Duration is the duration of the appointment",
                    "type": "integer"
                },
                "enabled": {
                    "description": "Enabled is the status of the appointment settings",
                    "type": "boolean"
                },
                "min_notice": {
                    "description": "MinNotice is the minimum notice required to book the appointment",
                    "type": "string"
                },
                "start_time_increment": {
                    "description": "StartTimeIncrement is the increment of the start time",
                    "type": "string"
                },
                "user_id": {
                    "description": "UserID is the user id of the user who created the appointment settings",
                    "type": "integer"
                }
            }
        },
        "model.AppointmentWithUser": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "appointment_date": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "partner": {
                    "$ref": "#/definitions/model.User"
                },
                "partner_id": {
                    "type": "integer"
                },
                "reason": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "status": {
                    "description": "1= active 2 = inactive",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.appointmentStatus"
                        }
                    ]
                },
                "time": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.Asset": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "LastUsedAt": {
                    "type": "string"
                },
                "blurhash": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "extension": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "location": {
                    "description": "can be local, s3",
                    "type": "string",
                    "default": "local"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/model.FileType"
                },
                "url": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "model.AvailableDay": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean"
                },
                "end_time": {
                    "type": "string"
                },
                "events_hours": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.EventsHour"
                    }
                },
                "full_of_appointments": {
                    "type": "boolean"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "model.AvailableDays": {
            "type": "object",
            "properties": {
                "friday": {
                    "$ref": "#/definitions/model.AvailableDay"
                },
                "monday": {
                    "$ref": "#/definitions/model.AvailableDay"
                },
                "saturday": {
                    "$ref": "#/definitions/model.AvailableDay"
                },
                "sunday": {
                    "$ref": "#/definitions/model.AvailableDay"
                },
                "thursday": {
                    "$ref": "#/definitions/model.AvailableDay"
                },
                "tuesday": {
                    "$ref": "#/definitions/model.AvailableDay"
                },
                "wednesday": {
                    "$ref": "#/definitions/model.AvailableDay"
                }
            }
        },
        "model.AvailableHour": {
            "type": "object",
            "properties": {
                "available": {
                    "type": "boolean"
                },
                "end_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "model.Block": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "blocked_id": {
                    "type": "integer"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.Call": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "call_id": {
                    "description": "CallID is the unique identifier for the call",
                    "type": "string"
                },
                "call_type": {
                    "description": "CallType is the type of the call",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.CallType"
                        }
                    ]
                },
                "caller": {
                    "description": "Caller is the caller",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "caller_id": {
                    "description": "CallerID is the ID of the caller",
                    "type": "integer"
                },
                "duration": {
                    "description": "Duration is the duration of the call",
                    "type": "integer"
                },
                "ended_at": {
                    "description": "EndedAt is the time the call ended",
                    "type": "string"
                },
                "receiver": {
                    "description": "Receiver is the receiver",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "receiver_id": {
                    "description": "ReceiverID is the ID of the receiver",
                    "type": "integer"
                },
                "started_at": {
                    "description": "StartedAt is the time the call started",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the call",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.CallStatus"
                        }
                    ]
                }
            }
        },
        "model.CallCreate": {
            "type": "object",
            "required": [
                "call_type",
                "receiver_id"
            ],
            "properties": {
                "call_type": {
                    "$ref": "#/definitions/model.CallType"
                },
                "receiver_id": {
                    "type": "integer"
                }
            }
        },
        "model.CallStatus": {
            "type": "string",
            "enum": [
                "ringing",
                "answered",
                "missed"
            ],
            "x-enum-varnames": [
                "CallStatusRinging",
                "CallStatusAnswered",
                "CallStatusMissed"
            ]
        },
        "model.CallType": {
            "type": "string",
            "enum": [
                "voice",
                "video"
            ],
            "x-enum-varnames": [
                "CallTypeVoice",
                "CallTypeVideo"
            ]
        },
        "model.Category": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "asset": {
                    "description": "Asset is the asset of the category",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Asset"
                        }
                    ]
                },
                "cover": {
                    "description": "Cover is the cover image of the category uuid",
                    "type": "string"
                },
                "index": {
                    "description": "Index is the index of the category for sorting",
                    "type": "integer"
                },
                "isFollowed": {
                    "description": "IsFollowed is the status of the category",
                    "type": "boolean"
                },
                "languages": {
                    "description": "Languages is the languages of the category",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/languages.Language"
                    }
                },
                "title": {
                    "description": "Title is the title of the category",
                    "type": "string"
                }
            }
        },
        "model.Device": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "LastLoginAt": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "deviceAppBuild": {
                    "type": "string"
                },
                "deviceAppBundleID": {
                    "type": "string"
                },
                "deviceAppLocale": {
                    "type": "string"
                },
                "deviceAppPushNotificationsEnabled": {
                    "type": "boolean"
                },
                "deviceAppPushNotificationsEnabledValid": {
                    "type": "boolean"
                },
                "deviceAppTimezone": {
                    "type": "string"
                },
                "deviceAppVersion": {
                    "type": "string"
                },
                "deviceBrand": {
                    "type": "string"
                },
                "deviceEnabled": {
                    "type": "boolean"
                },
                "deviceID": {
                    "description": "DeviceID is the unique identifier for the device uuid",
                    "type": "string"
                },
                "deviceModel": {
                    "type": "string"
                },
                "deviceName": {
                    "type": "string"
                },
                "deviceOS": {
                    "type": "string"
                },
                "deviceOSVersion": {
                    "type": "string"
                },
                "deviceToken": {
                    "description": "DeviceToken is the token of the device",
                    "type": "string"
                },
                "deviceType": {
                    "type": "string"
                },
                "deviceVoIPToken": {
                    "description": "DeviceVoIPToken is the voip token of the device",
                    "type": "string"
                },
                "ipAddress": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "macAddress": {
                    "type": "string"
                },
                "notificationEnabled": {
                    "description": "1 for true, 0 for false",
                    "type": "boolean"
                },
                "userID": {
                    "description": "UserID is the user id of the device",
                    "type": "integer"
                }
            }
        },
        "model.EventInvitation": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "dietary_preference": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "facebook": {
                    "type": "string"
                },
                "fullName": {
                    "type": "string"
                },
                "instagram": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "twitter": {
                    "type": "string"
                }
            }
        },
        "model.EventsHour": {
            "type": "object",
            "properties": {
                "end_time": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                }
            }
        },
        "model.FeatureFlag": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "enabled": {
                    "type": "boolean"
                },
                "key": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                }
            }
        },
        "model.FileType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "Image",
                "Video",
                "Audio"
            ]
        },
        "model.Follow": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "followID": {
                    "type": "integer"
                },
                "follower": {
                    "$ref": "#/definitions/model.User"
                },
                "isFollowing": {
                    "type": "boolean"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                },
                "userID": {
                    "description": "User ID who is following",
                    "type": "integer"
                }
            }
        },
        "model.Issue": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "device": {
                    "description": "Device *Device `json:\"device\" gorm:\"foreignKey:DeviceID;references:DeviceID\"`",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Device"
                        }
                    ]
                },
                "device_id": {
                    "type": "string"
                },
                "jira_id": {
                    "type": "string"
                },
                "jira_status": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "on_jira": {
                    "type": "boolean"
                },
                "status": {
                    "$ref": "#/definitions/model.IssueStatus"
                },
                "trace": {
                    "type": "string"
                },
                "type": {
                    "description": "Issue type (e.g. automatic, manual, etc.)",
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/model.User"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "model.IssueStatus": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "New",
                "InProgress",
                "Resolved"
            ]
        },
        "model.KeyValue": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "deletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "key": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "value": {
                    "type": "string"
                }
            }
        },
        "model.Log": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "ipAdress": {
                    "description": "ip_address",
                    "type": "string"
                },
                "message": {
                    "description": "message",
                    "type": "string"
                },
                "referenceID": {
                    "description": "refrence_id",
                    "type": "integer"
                },
                "type": {
                    "description": "type",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.LogType"
                        }
                    ]
                },
                "userAgent": {
                    "type": "string"
                },
                "userID": {
                    "description": "user_id",
                    "type": "integer"
                }
            }
        },
        "model.LogType": {
            "type": "string",
            "enum": [
                "LOGIN",
                "ACTIVITY",
                "USER_LOGINS",
                "USER_REGISTER",
                "USER_LOGOUT",
                "POST_CREATE",
                "POST_UPDATE",
                "POST_DELETE",
                "POST_RATED",
                "POST_PURCHASED",
                "POST_VIEWED",
                "SEED_CREATE",
                "SEED_UPDATE",
                "SEED_DELETE",
                "PROGRAM_CREATE",
                "PROGRAM_UPDATE",
                "PROGRAM_DELETE",
                "FLAGED_CLEARED"
            ],
            "x-enum-varnames": [
                "LogTypeLogin",
                "LogTypeActivity",
                "LogTypeUserLogins",
                "LogTypeUserRegister",
                "LogTypeUserLogout",
                "LogTypePostCreate",
                "LogTypePostUpdate",
                "LogTypePostDelete",
                "LogTypePostRated",
                "LogTypePostPurchased",
                "LogTypePostViewed",
                "LogTypeSeedCreate",
                "LogTypeSeedUpdate",
                "LogTypeSeedDelete",
                "LogTypeProgramCreate",
                "LogTypeProgramUpdate",
                "LogTypeProgramDelete",
                "LogTypeClearFlag"
            ]
        },
        "model.Mailing": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "country": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "ip": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "os": {
                    "type": "string"
                },
                "ref": {
                    "type": "string"
                }
            }
        },
        "model.Mute": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "muted_id": {
                    "description": "MutedID is the user id of the muted user",
                    "type": "integer"
                },
                "user": {
                    "description": "User is the user who muted",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "UserID is the user id of the user who muted",
                    "type": "integer"
                }
            }
        },
        "model.NotInterestedSeed": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "description": "User ID",
                    "type": "string"
                },
                "seedID": {
                    "description": "Seed ID",
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "model.PinChat": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "chat_id": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "model.Post": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "PublishedAt": {
                    "description": "PublishedAt of the post (date and time of the post) - used for scheduling",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "body": {
                    "description": "Body of the post (content)",
                    "type": "string"
                },
                "category_id": {
                    "description": "Category ID of the post (used for categorization) - foreign key",
                    "type": "integer"
                },
                "duration": {
                    "description": "Duration of the post (in milliseconds) - used for audio and video posts",
                    "type": "integer"
                },
                "image_id": {
                    "description": "Image ID of the post (used for the cover image) - foreign key",
                    "type": "string"
                },
                "is_featured": {
                    "description": "IsFeatured status of the post (featured, not featured) - enum",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostIsFeatured"
                        }
                    ]
                },
                "is_paid": {
                    "description": "IsPaid status of the post (free, paid) - enum (default: free)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostPaidStatus"
                        }
                    ]
                },
                "is_pinned": {
                    "description": "IsPinned status of the post (pinned, not pinned) - enum",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostIsPinned"
                        }
                    ]
                },
                "language": {
                    "description": "Language of the post (english, arabic) - enum (auto-detected)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostLanguage"
                        }
                    ]
                },
                "media_id": {
                    "description": "Media ID of the post (used for the media file) - foreign key",
                    "type": "string"
                },
                "paid_price": {
                    "description": "PaidPrice of the post (price of the post) - used for paid posts",
                    "type": "number"
                },
                "post_type": {
                    "description": "Post type of the post (article, video, audio) - enum",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostType"
                        }
                    ]
                },
                "rating": {
                    "description": "Rating of the post (average rating from users) - calculated with the ratings",
                    "type": "number"
                },
                "reading_time": {
                    "description": "Reading time of the post (in seconds) - used for articles",
                    "type": "integer"
                },
                "slug": {
                    "description": "Slug of the post (used in the URL)",
                    "type": "string"
                },
                "status": {
                    "description": "Status of the post (draft, published, deleted, archived) - enum",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostStatus"
                        }
                    ]
                },
                "tags": {
                    "description": "Tags of the post (used for search) - separated by comma",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the post (headline)",
                    "type": "string"
                },
                "user_id": {
                    "description": "User ID of the post (used for the author) - foreign key",
                    "type": "integer"
                }
            }
        },
        "model.PostCard": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "PublishedAt": {
                    "description": "PublishedAt of the post (date and time of the post) - used for scheduling",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "category": {
                    "description": "Category is the category of the post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Category"
                        }
                    ]
                },
                "category_id": {
                    "description": "Category ID of the post (used for categorization) - foreign key",
                    "type": "integer"
                },
                "duration": {
                    "description": "Duration of the post (in milliseconds) - used for audio and video posts",
                    "type": "integer"
                },
                "image": {
                    "description": "Image is the cover image of the post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Asset"
                        }
                    ]
                },
                "image_id": {
                    "description": "Image ID of the post (used for the cover image) - foreign key",
                    "type": "string"
                },
                "isUpdated": {
                    "description": "IsUpdated is the update status of the post",
                    "type": "boolean"
                },
                "is_bookmarked": {
                    "description": "IsBookmarked is the bookmark status of the post",
                    "type": "boolean"
                },
                "is_complete_reading": {
                    "description": "IsCompleteReading is the complete read status of the post",
                    "type": "boolean"
                },
                "is_follow_publisher": {
                    "description": "IsFollowPublisher is the follow status of the publisher",
                    "type": "boolean"
                },
                "is_paid": {
                    "description": "IsPaid status of the post (free, paid) - enum (default: free)",
                    "enum": [
                        1,
                        2
                    ],
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostPaidStatus"
                        }
                    ]
                },
                "is_pinned": {
                    "description": "IsPinned is the pinned status of the post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostIsPinned"
                        }
                    ]
                },
                "is_user_blocked": {
                    "description": "IsUserBlocked is the block status of the user",
                    "type": "boolean"
                },
                "language": {
                    "description": "Lanuage",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostLanguage"
                        }
                    ]
                },
                "media_id": {
                    "description": "Media ID of the post (used for the media file) - foreign key",
                    "type": "string"
                },
                "paid_price": {
                    "description": "PaidPrice of the post (price of the post) - used for paid posts",
                    "type": "number"
                },
                "post_type": {
                    "description": "Post type of the post (article, video, audio) - enum",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.PostType"
                        }
                    ]
                },
                "reading_time": {
                    "description": "Reading time of the post (in seconds) - used for articles",
                    "type": "integer"
                },
                "slug": {
                    "description": "Slug of the post (used in the URL)",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the post (headline)",
                    "type": "string"
                },
                "user": {
                    "description": "User is the author of the post",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "User ID of the post (used for the author) - foreign key",
                    "type": "integer"
                },
                "user_pay_post": {
                    "description": "check if user pay post",
                    "type": "boolean"
                },
                "user_reading_time": {
                    "description": "UserReadingTime is the complete read status of the post",
                    "type": "integer"
                }
            }
        },
        "model.PostHeighlight": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "content": {
                    "description": "Content",
                    "type": "string"
                },
                "endIndex": {
                    "description": "EndIndex is the end index of the selected text",
                    "type": "integer"
                },
                "postID": {
                    "description": "PostID is the post id that the user selected the text from",
                    "type": "integer"
                },
                "selectedText": {
                    "description": "SelectedText is the text that user selected to be heightlighted",
                    "type": "string"
                },
                "startIndex": {
                    "description": "StartIndex is the start index of the selected text",
                    "type": "integer"
                },
                "userID": {
                    "description": "UserID is the user id that selected the text",
                    "type": "integer"
                }
            }
        },
        "model.PostIsFeatured": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "IsFeaturedNo",
                "IsFeaturedYes"
            ]
        },
        "model.PostIsPinned": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "IsPinnedNo",
                "IsPinnedYes"
            ]
        },
        "model.PostLanguage": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "LanguageEnglish",
                "LanguageArabic"
            ]
        },
        "model.PostPaidStatus": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "FreePost",
                "PaidPost"
            ]
        },
        "model.PostReadingTime": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "post_id": {
                    "type": "integer",
                    "example": 1
                },
                "time": {
                    "description": "Time is the number of times the user has read the post 1000ms = 1s",
                    "type": "integer",
                    "example": 1000
                },
                "user_id": {
                    "type": "integer",
                    "example": 1
                }
            }
        },
        "model.PostReadingTimeCreate": {
            "type": "object",
            "required": [
                "post_id",
                "time"
            ],
            "properties": {
                "post_id": {
                    "type": "integer",
                    "example": 1
                },
                "time": {
                    "description": "Time is the number of times the user has read the post 1000ms = 1s",
                    "type": "integer",
                    "example": 1000
                }
            }
        },
        "model.PostReport": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "cleared": {
                    "type": "boolean"
                },
                "cleared_at": {
                    "type": "string"
                },
                "cleared_by": {
                    "type": "integer"
                },
                "cleared_reason": {
                    "type": "string"
                },
                "postID": {
                    "type": "integer"
                },
                "reportMessage": {
                    "type": "string"
                },
                "reportType": {
                    "$ref": "#/definitions/model.PostReportType"
                },
                "reporterUserID": {
                    "type": "integer"
                },
                "resolutionStatus": {
                    "$ref": "#/definitions/model.ReportResolutionStatus"
                },
                "reviewMessage": {
                    "type": "string"
                },
                "reviewed": {
                    "type": "boolean"
                },
                "reviewerUserID": {
                    "type": "integer"
                }
            }
        },
        "model.PostReportType": {
            "type": "string",
            "enum": [
                "SPAM",
                "HARASSMENT",
                "INAPPROPRIATE_CONTENT",
                "OTHER"
            ],
            "x-enum-varnames": [
                "Spam",
                "Harassment",
                "InappropriateContent",
                "Other"
            ]
        },
        "model.PostStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "StatusDraft",
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
            ]
        },
        "model.PostType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "PostTypeArticle",
                "PostTypeVideo",
                "PostTypeAudio"
            ]
        },
        "model.Program": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "complete_ratio": {
                    "description": "CompleteRatio",
                    "type": "number"
                },
                "cover": {
                    "type": "string"
                },
                "is_bookmarked": {
                    "description": "Is bookmarked",
                    "type": "boolean"
                },
                "is_draft": {
                    "type": "boolean"
                },
                "is_paid": {
                    "description": "is paid",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ProgramStatus"
                        }
                    ]
                },
                "paid_price": {
                    "description": "PaidPrice",
                    "type": "number"
                },
                "posts": {
                    "description": "Posts",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Post"
                    }
                },
                "posts_count": {
                    "description": "Posts count",
                    "type": "integer"
                },
                "posts_id": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "publisher": {
                    "description": "Publisher",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Publisher"
                        }
                    ]
                },
                "tags": {
                    "type": "string"
                },
                "title": {
                    "description": "Program info",
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_pay_program": {
                    "description": "UserPayProgram",
                    "type": "boolean"
                }
            }
        },
        "model.ProgramStatus": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "FreeProgram",
                "PaidProgram"
            ]
        },
        "model.Publisher": {
            "type": "object",
            "properties": {
                "ID": {
                    "description": "ID is the unique identifier of the publisher.",
                    "type": "integer"
                },
                "avatar": {
                    "description": "Avatar is the profile picture of the publisher.",
                    "type": "string"
                },
                "bio": {
                    "description": "Bio is the biography of the publisher.",
                    "type": "string"
                },
                "firstName": {
                    "description": "FirstName is the first name of the publisher.",
                    "type": "string"
                },
                "hasPrivateProfile": {
                    "description": "HasPrivateProfile is the flag that indicates if the publisher has a private profile.",
                    "type": "boolean"
                },
                "isBlockedByMe": {
                    "description": "IsBlockedByMe is the flag that indicates if the publisher is blocked by the user.",
                    "type": "boolean"
                },
                "isBlockedMe": {
                    "description": "IsBlockedMe is the flag that indicates if the publisher is blocked by the user.",
                    "type": "boolean"
                },
                "isChatSubscribed": {
                    "description": "IsChatSubscribed is the flag that indicates if the user is subscribed to the chat of the publisher.",
                    "type": "boolean"
                },
                "isFollower": {
                    "description": "IsFollower is the flag that indicates if the publisher is followed by the user.",
                    "type": "boolean"
                },
                "isFollowing": {
                    "description": "IsFollowing is the flag that indicates if the user is following the publisher.",
                    "type": "boolean"
                },
                "isMuted": {
                    "description": "IsMuted is the flag that indicates if the publisher is muted by the user.",
                    "type": "boolean"
                },
                "lastName": {
                    "description": "LastName is the last name of the publisher.",
                    "type": "string"
                },
                "partnerShip": {
                    "description": "PartnerShip is the partnership status of the publisher.",
                    "type": "string"
                },
                "ratings": {
                    "description": "Ratings is the average rating of the publisher.",
                    "type": "number"
                },
                "trailer": {
                    "description": "Trailer is the video trailer of the publisher.",
                    "type": "string"
                },
                "user_settings": {
                    "description": "UserSettings is the settings of the publisher.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.UserSettings"
                        }
                    ]
                },
                "username": {
                    "description": "Username is the unique username of the publisher.",
                    "type": "string"
                },
                "views": {
                    "description": "Views is the number of views of the publisher.",
                    "type": "integer"
                }
            }
        },
        "model.PublisherReportType": {
            "type": "string",
            "enum": [
                "FALSE_INFORMATION",
                "MISLEADING_CONTENT",
                "INAPPROPRIATE_BEHAVIOR",
                "FRAUDULENT_ACTIVITY",
                "OTHER"
            ],
            "x-enum-varnames": [
                "FalseInformation",
                "MisleadingContent",
                "InappropriateBehavior",
                "FraudulentActivity",
                "OtherReason"
            ]
        },
        "model.RegisterType": {
            "type": "string",
            "enum": [
                "email",
                "facebook",
                "google",
                "apple",
                "invite"
            ],
            "x-enum-varnames": [
                "EmailRegisterType",
                "FacebookRegisterType",
                "GoogleRegisterType",
                "AppleRegisterType",
                "InviteRegisterType"
            ]
        },
        "model.Report": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "description": {
                    "description": "Description is the description of the report",
                    "type": "string",
                    "example": "This is a spam post"
                },
                "reportee": {
                    "description": "Reportee is the user, post, seed,  being reported"
                },
                "reportee_id": {
                    "description": "ReporteeID is the user, post, seed,  being reported",
                    "type": "integer",
                    "example": 1
                },
                "reportee_type": {
                    "description": "ReporteeType is the type of the reportee",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ReporteeType"
                        }
                    ],
                    "example": "user, post, seed"
                },
                "seed": {
                    "description": "User is the user who is reporting\nUser *User `json:\"user\" gorm:\"foreignKey:UserID;references:ID\"`\nSeed is the seed being reported",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Seed"
                        }
                    ]
                },
                "status": {
                    "description": "Status is the status of the report",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.ReportStatus"
                        }
                    ],
                    "example": 1
                },
                "type": {
                    "description": "Type is the type of report being made",
                    "type": "string",
                    "example": "spam, abuse, etc"
                },
                "user_id": {
                    "description": "UserID is the user who is reporting",
                    "type": "integer"
                }
            }
        },
        "model.ReportResolutionStatus": {
            "type": "string",
            "enum": [
                "RESOLVED",
                "UNRESOLVED"
            ],
            "x-enum-varnames": [
                "IsReolved",
                "Unresolved"
            ]
        },
        "model.ReportStatus": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "ReportPending",
                "ReportResolved",
                "ReportRejected"
            ]
        },
        "model.ReporteeType": {
            "type": "string",
            "enum": [
                "user",
                "post",
                "seed"
            ],
            "x-enum-varnames": [
                "ReporteeUser",
                "ReporteePost",
                "ReporteeSeed"
            ]
        },
        "model.Seed": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "asset": {
                    "description": "Asset the file of the seed ref is the link to the asset table",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Asset"
                        }
                    ]
                },
                "comment_count": {
                    "type": "integer"
                },
                "description": {
                    "description": "Description of the seed",
                    "type": "string"
                },
                "image": {
                    "description": "Image of the seed",
                    "type": "string"
                },
                "is_bookmarked": {
                    "description": "Ignore for gorm to not create a column for this just for the relation",
                    "type": "boolean"
                },
                "is_draft": {
                    "type": "boolean"
                },
                "is_follow_publisher": {
                    "type": "boolean"
                },
                "is_interested": {
                    "type": "boolean"
                },
                "is_liked": {
                    "type": "boolean"
                },
                "like_count": {
                    "type": "integer"
                },
                "link": {
                    "description": "Link of the seed",
                    "type": "string"
                },
                "local_video": {
                    "description": "File Path of local video",
                    "type": "string"
                },
                "post": {
                    "description": "Post of the seed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.Post"
                        }
                    ]
                },
                "post_id": {
                    "description": "PostID of the seed if linked to a post",
                    "type": "integer"
                },
                "status": {
                    "description": "Status of the seed (Pending, Approved, Rejected) default is Approved for now",
                    "type": "number",
                    "enum": [
                        0,
                        1,
                        2
                    ]
                },
                "thumb": {
                    "description": "Thumb of the seed",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the seed",
                    "type": "string"
                },
                "user": {
                    "description": "User of the seed",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "user_id": {
                    "description": "User ID of the seed",
                    "type": "integer"
                },
                "view_count": {
                    "type": "integer"
                }
            }
        },
        "model.SeedComment": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "comment": {
                    "description": "Comment",
                    "type": "string"
                },
                "seedID": {
                    "description": "Seed ID",
                    "type": "integer"
                },
                "user": {
                    "description": "User",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.User"
                        }
                    ]
                },
                "userID": {
                    "description": "User ID",
                    "type": "integer"
                }
            }
        },
        "model.SeedCommentCreate": {
            "type": "object",
            "required": [
                "comment"
            ],
            "properties": {
                "comment": {
                    "description": "Comment",
                    "type": "string"
                }
            }
        },
        "model.SeedCreate": {
            "type": "object",
            "required": [
                "description",
                "title"
            ],
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "description": {
                    "description": "Description of the seed",
                    "type": "string"
                },
                "is_draft": {
                    "description": "Is Seed Draft",
                    "type": "boolean"
                },
                "local_video": {
                    "description": "File Path of local video",
                    "type": "string"
                },
                "post_id": {
                    "description": "PostID of the seed if linked to a post",
                    "type": "integer"
                },
                "thumb": {
                    "description": "Thumb of the seed",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the seed",
                    "type": "string"
                },
                "user_id": {
                    "description": "User ID of the seed",
                    "type": "integer"
                }
            }
        },
        "model.SeedGuideline": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "content": {
                    "type": "string"
                },
                "lang": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "model.SeedReport": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "cleared": {
                    "type": "boolean"
                },
                "cleared_at": {
                    "type": "string"
                },
                "cleared_by": {
                    "type": "integer"
                },
                "cleared_reason": {
                    "type": "string"
                },
                "reportMessage": {
                    "type": "string"
                },
                "reportType": {
                    "$ref": "#/definitions/model.SeedReportType"
                },
                "reporterUserID": {
                    "type": "integer"
                },
                "resolutionStatus": {
                    "$ref": "#/definitions/model.ReportResolutionStatus"
                },
                "reviewMessage": {
                    "type": "string"
                },
                "reviewed": {
                    "type": "boolean"
                },
                "reviewerUserID": {
                    "type": "integer"
                },
                "seedID": {
                    "type": "integer"
                }
            }
        },
        "model.SeedReportType": {
            "type": "string",
            "enum": [
                "SEED_SPAM",
                "SEED_SCAM",
                "SEED_VIOLENT",
                "NOT_INTERSTED",
                "FALSE_INFORMATION",
                "OTHER"
            ],
            "x-enum-varnames": [
                "SeedSpam",
                "SeedScam",
                "SeedViolent",
                "SeedNotIntersted",
                "SeedFalseInformation",
                "SeedOther"
            ]
        },
        "model.SeedUpdate": {
            "type": "object",
            "required": [
                "description",
                "title"
            ],
            "properties": {
                "UpdatedAt": {
                    "type": "string"
                },
                "description": {
                    "description": "Description of the seed",
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "is_draft": {
                    "description": "Is Seed Draft",
                    "type": "boolean"
                },
                "link": {
                    "description": "Link of the seed",
                    "type": "string"
                },
                "post_id": {
                    "description": "PostID of the seed if linked to a post",
                    "type": "integer"
                },
                "thumb": {
                    "description": "Thumb of the seed",
                    "type": "string"
                },
                "title": {
                    "description": "Title of the seed",
                    "type": "string"
                },
                "user_id": {
                    "description": "User ID of the seed",
                    "type": "integer"
                }
            }
        },
        "model.SeedView": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "seed_id": {
                    "description": "SeedID the seed being viewed",
                    "type": "integer"
                },
                "user_id": {
                    "description": "UserID the user who views the seed",
                    "type": "integer"
                }
            }
        },
        "model.User": {
            "type": "object",
            "properties": {
                "ChangeNameDate": {
                    "description": "NameChangingAt is the date of the user's name changing",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "IsUserReported": {
                    "description": "IsUserReported is the user report status of the user",
                    "type": "boolean"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "appleID": {
                    "type": "string"
                },
                "avatar": {
                    "description": "Avatar is the avatar of the user",
                    "type": "string"
                },
                "bio": {
                    "description": "Bio is the bio of the user",
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/model.Category"
                    }
                },
                "countryCode": {
                    "description": "CountryCode is the country code of the user",
                    "type": "string"
                },
                "countryIso": {
                    "description": "CountryIso is the country iso of the user",
                    "type": "string"
                },
                "credit": {
                    "description": "Credit is the credit of the user",
                    "type": "number"
                },
                "earnings": {
                    "description": "Earnings is the earnings of the user",
                    "type": "number"
                },
                "email": {
                    "description": "Email is the email of the user",
                    "type": "string"
                },
                "emailVerified": {
                    "description": "EmailVerified is the email verification status of the user",
                    "type": "boolean"
                },
                "facebookID": {
                    "type": "string"
                },
                "firstName": {
                    "description": "FirstName is the first name of the user",
                    "type": "string"
                },
                "googleID": {
                    "description": "GoogleID is the google id of the user",
                    "type": "string"
                },
                "hasPrivateProfile": {
                    "description": "HasPrivateProfile is the private profile status of the user",
                    "type": "boolean"
                },
                "isStaff": {
                    "description": "IsStaff is the staff status of the user",
                    "type": "boolean"
                },
                "lastName": {
                    "description": "LastName is the last name of the user",
                    "type": "string"
                },
                "partnerShip": {
                    "description": "PartnerShip is the partnership of the user (none, partner)",
                    "type": "string"
                },
                "phone": {
                    "description": "Phone is the phone number of the user",
                    "type": "string"
                },
                "registerType": {
                    "description": "RegisterType is the register type of the user (email, facebook, google, apple, invite)",
                    "allOf": [
                        {
                            "$ref": "#/definitions/model.RegisterType"
                        }
                    ]
                },
                "role_id": {
                    "description": "RoleID is the role id of the user",
                    "type": "integer"
                },
                "socialEmail": {
                    "description": "SocialEmail is the email of the user from social media",
                    "type": "string"
                },
                "status": {
                    "description": "Status is the status of the user (active, inactive, deleted)",
                    "type": "string"
                },
                "stripeCustomerID": {
                    "description": "StripeCustomerID is the stripe customer id of the user",
                    "type": "string"
                },
                "trailer": {
                    "description": "Trailer is the trailer of the user",
                    "type": "string"
                },
                "userSettings": {
                    "$ref": "#/definitions/model.UserSettings"
                },
                "username": {
                    "description": "Username is the username of the user",
                    "type": "string"
                }
            }
        },
        "model.UserReport": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "cleared": {
                    "type": "boolean"
                },
                "cleared_at": {
                    "type": "string"
                },
                "cleared_by": {
                    "type": "integer"
                },
                "cleared_reason": {
                    "type": "string"
                },
                "publisherUserID": {
                    "type": "integer"
                },
                "reportMessage": {
                    "type": "string"
                },
                "reportType": {
                    "$ref": "#/definitions/model.PublisherReportType"
                },
                "reporterUserID": {
                    "type": "integer"
                },
                "resolutionStatus": {
                    "$ref": "#/definitions/model.ReportResolutionStatus"
                },
                "reviewMessage": {
                    "type": "string"
                },
                "reviewed": {
                    "type": "boolean"
                },
                "reviewerUserID": {
                    "type": "integer"
                }
            }
        },
        "model.UserSettings": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "appointments_notification": {
                    "type": "boolean"
                },
                "audio_call_enabled": {
                    "type": "boolean"
                },
                "chat_disable": {
                    "type": "boolean"
                },
                "chat_monetization": {
                    "type": "boolean"
                },
                "chat_monetization_price": {
                    "type": "number"
                },
                "chat_monetization_selected": {
                    "description": "ChatMonetizationSelected\n1 =\u003e everyone ,2 =\u003e How Not Follow Me ,3 =\u003e That follow me ,4 =\u003e I Don't follow ,5 =\u003e For specific people",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "chat_monetization_selected_users": {
                    "description": "ChatMonetizationSelectedUsers",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "notification_highlight": {
                    "type": "boolean"
                },
                "notification_new_follower": {
                    "type": "boolean"
                },
                "notification_new_interest_post": {
                    "type": "boolean"
                },
                "notification_new_post": {
                    "type": "boolean"
                },
                "notification_new_rate": {
                    "type": "boolean"
                },
                "private_account": {
                    "type": "boolean"
                },
                "push_notification": {
                    "type": "boolean"
                },
                "seed_comment_notification": {
                    "type": "boolean"
                },
                "seed_create_notification": {
                    "type": "boolean"
                },
                "seed_like_notification": {
                    "type": "boolean"
                },
                "user_id": {
                    "type": "integer"
                },
                "video_call_enabled": {
                    "type": "boolean"
                }
            }
        },
        "model.appointmentStatus": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "active",
                "inactive"
            ]
        },
        "models.Category": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "icon": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/languages.Language"
                    }
                },
                "name": {
                    "type": "string"
                },
                "subCategories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.SubCategory"
                    }
                }
            }
        },
        "models.Feedback": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "topicID": {
                    "type": "integer"
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.SubCategory": {
            "type": "object",
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "categoryID": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "index": {
                    "type": "integer"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/languages.Language"
                    }
                },
                "name": {
                    "type": "string"
                },
                "topics": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.Topic"
                    }
                }
            }
        },
        "models.Ticket": {
            "type": "object",
            "properties": {
                "ClosedAt": {
                    "type": "string"
                },
                "CreatedAt": {
                    "description": "Ticket Dates",
                    "type": "string"
                },
                "ID": {
                    "description": "Ids",
                    "type": "integer"
                },
                "ResolvedAt": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "image_id": {
                    "type": "string"
                },
                "replies": {
                    "description": "Ticket Replies",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/models.TicketReplay"
                    }
                },
                "seen": {
                    "description": "Seen",
                    "type": "boolean"
                },
                "staffSeen": {
                    "description": "StaffSeen",
                    "type": "boolean"
                },
                "status": {
                    "description": "Ticket Status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.TicketStatus"
                        }
                    ]
                },
                "title": {
                    "description": "Ticket Details",
                    "type": "string"
                },
                "user": {
                    "description": "Ticket User",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.TicketReplay": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "description": "Ticket Reply Dates",
                    "type": "string"
                },
                "ID": {
                    "description": "Ids",
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "message": {
                    "description": "Ticket Reply Details",
                    "type": "string"
                },
                "seen": {
                    "description": "Seen",
                    "type": "boolean"
                },
                "staffSeen": {
                    "description": "StaffSeen",
                    "type": "boolean"
                },
                "ticketID": {
                    "type": "integer"
                },
                "user": {
                    "description": "Ticket Reply User Details",
                    "allOf": [
                        {
                            "$ref": "#/definitions/models.User"
                        }
                    ]
                },
                "userID": {
                    "type": "integer"
                }
            }
        },
        "models.TicketStatus": {
            "type": "integer",
            "enum": [
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "Open",
                "Resolved",
                "Closed"
            ]
        },
        "models.Topic": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "categoryID": {
                    "type": "integer"
                },
                "index": {
                    "type": "integer"
                },
                "languages": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/languages.Language"
                    }
                },
                "name": {
                    "type": "string"
                },
                "subCategoryID": {
                    "type": "integer"
                },
                "thumbsDown": {
                    "description": "thumbs down count",
                    "type": "integer"
                },
                "thumbsUp": {
                    "description": "thumbs up count",
                    "type": "integer"
                }
            }
        },
        "models.User": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "registerType": {
                    "type": "string"
                },
                "socialEmail": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "notify.Notification": {
            "type": "object",
            "required": [
                "message",
                "title",
                "usersID"
            ],
            "properties": {
                "actions": {
                    "type": "string"
                },
                "data": {},
                "message": {
                    "type": "string"
                },
                "post_id": {
                    "type": "integer"
                },
                "publisher_id": {
                    "type": "integer"
                },
                "seed_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/notify.NotificationType"
                },
                "usersID": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            }
        },
        "notify.NotificationType": {
            "type": "string",
            "enum": [
                "new_published_post",
                "interest_post",
                "rate_post",
                "new_follower_user",
                "new_chat_message",
                "post_status_changed",
                "post_has_paid",
                "new_highlight",
                "like_seed",
                "appointment_notification",
                "comment_seed",
                "new_published_seed"
            ],
            "x-enum-varnames": [
                "NotificationTypeNewPost",
                "NotificationTypeInterestPost",
                "NotificationTypeRatePost",
                "NotificationTypeNewFollower",
                "NotificationTypeNewChatMessage",
                "NotificationTypePostStatusChanged",
                "NotificationTypePostHasPaid",
                "NotificationTypeNewHighlight",
                "NotificationTypeNewLikeSeed",
                "NotificationTypeNewAppointment",
                "NotificationTypeNewCommentSeed",
                "NotificationTypeNewSeed"
            ]
        },
        "notify.Post": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "PublishedAt": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "category_id": {
                    "type": "integer"
                },
                "duration": {
                    "description": "in milliseconds",
                    "type": "integer"
                },
                "image_id": {
                    "type": "string"
                },
                "media_id": {
                    "type": "string"
                },
                "paid_price": {
                    "type": "number"
                },
                "post_type": {
                    "$ref": "#/definitions/notify.PostType"
                },
                "reading_time": {
                    "description": "in seconds",
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "tags": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "username": {
                    "type": "string"
                },
                "views": {
                    "type": "integer"
                }
            }
        },
        "notify.PostType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "PostTypeArticle",
                "PostTypeVideo",
                "PostTypeAudio"
            ]
        },
        "notify.UserNotification": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "actions": {
                    "type": "string"
                },
                "data": {
                    "type": "string"
                },
                "is_follow_publisher": {
                    "type": "boolean"
                },
                "message": {
                    "type": "string"
                },
                "post": {
                    "$ref": "#/definitions/notify.Post"
                },
                "post_id": {
                    "type": "integer"
                },
                "publisher": {
                    "$ref": "#/definitions/user.User"
                },
                "publisher_id": {
                    "type": "integer"
                },
                "read": {
                    "type": "boolean"
                },
                "seed": {
                    "$ref": "#/definitions/model.Seed"
                },
                "seed_id": {
                    "type": "integer"
                },
                "title": {
                    "type": "string"
                },
                "type": {
                    "$ref": "#/definitions/notify.NotificationType"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "payload.DataInfo": {
            "type": "object",
            "properties": {
                "next": {
                    "description": "Next is the next of the data info",
                    "type": "string"
                },
                "nextPage": {
                    "description": "NextPage is the next page of the data info",
                    "type": "integer"
                },
                "pages": {
                    "description": "Pages is the pages of the data info",
                    "type": "integer"
                },
                "prev": {
                    "description": "Prev is the prev of the data info",
                    "type": "string"
                },
                "prevPage": {
                    "description": "PrevPage is the prev page of the data info",
                    "type": "integer"
                },
                "total": {
                    "description": "Total is the total of the data info",
                    "type": "integer"
                }
            }
        },
        "payload.ServerResponseError": {
            "type": "object",
            "properties": {
                "causes": {
                    "description": "Causes is the causes of the server response error",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "code": {
                    "description": "Code is the code of the server response error",
                    "type": "string"
                },
                "desc": {
                    "description": "Desc is the description of the server response error",
                    "type": "string"
                },
                "error": {
                    "description": "Error is the error of the server response error",
                    "type": "string"
                },
                "models": {
                    "description": "Model is the models of the server response error",
                    "type": "string"
                },
                "msg": {
                    "description": "Msg is the message of the server response error",
                    "type": "string"
                },
                "note": {
                    "description": "Note is the note of the server response error",
                    "type": "string"
                },
                "params": {
                    "description": "Params is the params of the server response error"
                },
                "query": {
                    "description": "Query is the query of the server response error",
                    "type": "string"
                },
                "route": {
                    "description": "Route is the route of the server response error",
                    "type": "string"
                },
                "solution": {
                    "description": "Solution is the solution of the server response error",
                    "type": "string"
                },
                "stack": {
                    "description": "Stack is the stack of the server response error",
                    "type": "string"
                }
            }
        },
        "payload.ServerResponseMessage": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data is the data of the server response message"
                },
                "message": {
                    "description": "Message is the message of the server response message",
                    "type": "string"
                }
            }
        },
        "payload.ServerResponseSuccess": {
            "type": "object",
            "properties": {
                "data": {
                    "description": "Data is the data of the server response"
                },
                "info": {
                    "description": "Info is the info of the server response",
                    "allOf": [
                        {
                            "$ref": "#/definitions/payload.DataInfo"
                        }
                    ]
                }
            }
        },
        "permissions.Permissions": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "children": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permissions.Permissions"
                    }
                },
                "description": {
                    "type": "string"
                },
                "is_child": {
                    "type": "boolean"
                },
                "slug": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                }
            }
        },
        "posts.Asset": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "string"
                },
                "LastUsedAt": {
                    "type": "string"
                },
                "blurhash": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "extension": {
                    "type": "string"
                },
                "height": {
                    "type": "integer"
                },
                "path": {
                    "type": "string"
                },
                "size": {
                    "type": "integer"
                },
                "type": {
                    "$ref": "#/definitions/posts.FileType"
                },
                "url": {
                    "type": "string"
                },
                "userID": {
                    "type": "integer"
                },
                "width": {
                    "type": "integer"
                }
            }
        },
        "posts.FileType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "Image",
                "Video",
                "Audio"
            ]
        },
        "posts.Post": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "PublishedAt": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "category": {
                    "$ref": "#/definitions/category.Category"
                },
                "category_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "duration": {
                    "description": "in milliseconds",
                    "type": "integer"
                },
                "image": {
                    "$ref": "#/definitions/posts.Asset"
                },
                "image_id": {
                    "type": "string"
                },
                "isUpdated": {
                    "type": "boolean"
                },
                "is_featured": {
                    "description": "0: not featured, 1: featured",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostIsFeatured"
                        }
                    ]
                },
                "is_paid": {
                    "description": "1: free, 2: paid",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostPaidStatus"
                        }
                    ]
                },
                "is_pinned": {
                    "description": "1: not pinned, 2: pinned",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostIsPinned"
                        }
                    ]
                },
                "json_fields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "language": {
                    "$ref": "#/definitions/posts.PostLanguage"
                },
                "linked_seed": {
                    "type": "integer"
                },
                "media_id": {
                    "type": "string"
                },
                "paid_price": {
                    "type": "number"
                },
                "post_type": {
                    "$ref": "#/definitions/posts.PostType"
                },
                "reading_time": {
                    "description": "in seconds",
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/posts.PostStatus"
                },
                "tags": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user": {
                    "$ref": "#/definitions/user.User"
                },
                "user_id": {
                    "type": "integer"
                },
                "video_height": {
                    "type": "integer"
                },
                "video_thumb": {
                    "type": "string"
                },
                "video_width": {
                    "type": "integer"
                }
            }
        },
        "posts.PostCreationType": {
            "type": "object",
            "required": [
                "title"
            ],
            "properties": {
                "body": {
                    "type": "string"
                },
                "category_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "duration": {
                    "description": "in milliseconds",
                    "type": "integer"
                },
                "image_id": {
                    "type": "string"
                },
                "is_paid": {
                    "$ref": "#/definitions/posts.PostPaidStatus"
                },
                "json_fields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "media_id": {
                    "type": "string"
                },
                "paid_price": {
                    "type": "number"
                },
                "post_type": {
                    "$ref": "#/definitions/posts.PostType"
                },
                "status": {
                    "$ref": "#/definitions/posts.PostStatus"
                },
                "tags": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                }
            }
        },
        "posts.PostIsFeatured": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "IsFeaturedNo",
                "IsFeaturedYes"
            ]
        },
        "posts.PostIsPinned": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "IsPinnedNo",
                "IsPinnedYes"
            ]
        },
        "posts.PostLanguage": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "LanguageEnglish",
                "LanguageArabic"
            ]
        },
        "posts.PostPaidStatus": {
            "type": "integer",
            "enum": [
                1,
                2
            ],
            "x-enum-varnames": [
                "FreePost",
                "PaidPost"
            ]
        },
        "posts.PostRatingSaveType": {
            "type": "object",
            "properties": {
                "post_id": {
                    "type": "integer"
                },
                "rating": {
                    "type": "number"
                }
            }
        },
        "posts.PostResponse": {
            "type": "object",
            "properties": {
                "data": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/posts.PostWithFullData"
                    }
                },
                "info": {
                    "$ref": "#/definitions/payload.DataInfo"
                }
            }
        },
        "posts.PostStatus": {
            "type": "integer",
            "enum": [
                0,
                1,
                2,
                3
            ],
            "x-enum-varnames": [
                "StatusDraft",
                "StatusPublished",
                "StatusDeleted",
                "StatusArchived"
            ]
        },
        "posts.PostType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "PostTypeArticle",
                "PostTypeVideo",
                "PostTypeAudio"
            ]
        },
        "posts.PostUpdateType": {
            "type": "object",
            "required": [
                "ID"
            ],
            "properties": {
                "ID": {
                    "type": "integer"
                },
                "body": {
                    "type": "string"
                },
                "category_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "duration": {
                    "type": "integer"
                },
                "image_id": {
                    "type": "string"
                },
                "isUpdated": {
                    "type": "boolean"
                },
                "is_new": {
                    "type": "boolean"
                },
                "is_paid": {
                    "$ref": "#/definitions/posts.PostPaidStatus"
                },
                "json_fields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "linked_seed": {
                    "type": "integer"
                },
                "media_id": {
                    "type": "string"
                },
                "paid_price": {
                    "type": "number"
                },
                "post_type": {
                    "$ref": "#/definitions/posts.PostType"
                },
                "status": {
                    "$ref": "#/definitions/posts.PostStatus"
                },
                "tags": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "user_id": {
                    "type": "integer"
                },
                "video_height": {
                    "type": "integer"
                },
                "video_thumb": {
                    "type": "string"
                },
                "video_width": {
                    "type": "integer"
                }
            }
        },
        "posts.PostWithFullData": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "PublishedAt": {
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "body": {
                    "type": "string"
                },
                "category": {
                    "$ref": "#/definitions/category.Category"
                },
                "category_id": {
                    "type": "integer"
                },
                "content": {
                    "type": "string"
                },
                "duration": {
                    "description": "in milliseconds",
                    "type": "integer"
                },
                "image": {
                    "$ref": "#/definitions/posts.Asset"
                },
                "image_id": {
                    "type": "string"
                },
                "isUpdated": {
                    "type": "boolean"
                },
                "is_bookmarked": {
                    "type": "boolean"
                },
                "is_featured": {
                    "description": "0: not featured, 1: featured",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostIsFeatured"
                        }
                    ]
                },
                "is_follow_publisher": {
                    "type": "boolean"
                },
                "is_paid": {
                    "description": "1: free, 2: paid",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostPaidStatus"
                        }
                    ]
                },
                "is_pinned": {
                    "description": "1: not pinned, 2: pinned",
                    "allOf": [
                        {
                            "$ref": "#/definitions/posts.PostIsPinned"
                        }
                    ]
                },
                "is_post_reported": {
                    "type": "boolean"
                },
                "is_rated": {
                    "type": "boolean"
                },
                "is_user_blocked": {
                    "type": "boolean"
                },
                "json_fields": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "language": {
                    "$ref": "#/definitions/posts.PostLanguage"
                },
                "linked_seed": {
                    "type": "integer"
                },
                "media_id": {
                    "type": "string"
                },
                "paid_price": {
                    "type": "number"
                },
                "post_type": {
                    "$ref": "#/definitions/posts.PostType"
                },
                "rating": {
                    "type": "number"
                },
                "reading_status": {
                    "type": "boolean"
                },
                "reading_time": {
                    "description": "in seconds",
                    "type": "integer"
                },
                "slug": {
                    "type": "string"
                },
                "status": {
                    "$ref": "#/definitions/posts.PostStatus"
                },
                "tags": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "total_ratings": {
                    "type": "integer"
                },
                "user": {
                    "$ref": "#/definitions/user.User"
                },
                "user_id": {
                    "type": "integer"
                },
                "user_pay_post": {
                    "type": "boolean"
                },
                "user_reading_time": {
                    "type": "integer"
                },
                "video_height": {
                    "type": "integer"
                },
                "video_thumb": {
                    "type": "string"
                },
                "video_width": {
                    "type": "integer"
                },
                "views": {
                    "type": "integer"
                }
            }
        },
        "product.DiscountType": {
            "type": "integer",
            "enum": [
                0,
                1,
                2
            ],
            "x-enum-varnames": [
                "DiscountTypeNull",
                "DiscountTypePercentage",
                "DiscountTypeFixed"
            ]
        },
        "product.Product": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "credits": {
                    "type": "integer"
                },
                "description": {
                    "type": "string"
                },
                "discount": {
                    "type": "number"
                },
                "discount_end_at": {
                    "type": "string"
                },
                "discount_start_at": {
                    "type": "string"
                },
                "discount_type": {
                    "$ref": "#/definitions/product.DiscountType"
                },
                "name": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                }
            }
        },
        "role.Role": {
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string"
                },
                "ID": {
                    "type": "integer"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "permissions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/permissions.Permissions"
                    }
                }
            }
        },
        "user.RegisterType": {
            "type": "string",
            "enum": [
                "email",
                "facebook",
                "google",
                "apple",
                "invite"
            ],
            "x-enum-varnames": [
                "EmailRegisterType",
                "FacebookRegisterType",
                "GoogleRegisterType",
                "AppleRegisterType",
                "InviteRegisterType"
            ]
        },
        "user.User": {
            "type": "object",
            "required": [
                "email",
                "firstName",
                "lastName"
            ],
            "properties": {
                "ChangeNameDate": {
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string"
                },
                "DeletedAt": {
                    "$ref": "#/definitions/gorm.DeletedAt"
                },
                "ID": {
                    "type": "integer"
                },
                "IsUserReported": {
                    "type": "boolean"
                },
                "UpdatedAt": {
                    "type": "string"
                },
                "appleID": {
                    "type": "string"
                },
                "avatar": {
                    "type": "string"
                },
                "bio": {
                    "type": "string"
                },
                "categories": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/category.Category"
                    }
                },
                "countryCode": {
                    "type": "string"
                },
                "countryIso": {
                    "type": "string"
                },
                "credit": {
                    "type": "number"
                },
                "customerID": {
                    "type": "integer"
                },
                "earning": {
                    "type": "number"
                },
                "earnings": {
                    "type": "number"
                },
                "email": {
                    "type": "string"
                },
                "emailVerified": {
                    "type": "boolean"
                },
                "facebookID": {
                    "type": "string"
                },
                "firstName": {
                    "type": "string"
                },
                "gender": {
                    "type": "string"
                },
                "googleID": {
                    "type": "string"
                },
                "hasPrivateProfile": {
                    "type": "boolean"
                },
                "isStaff": {
                    "type": "boolean"
                },
                "lastIP": {
                    "type": "string"
                },
                "lastLogin": {
                    "type": "string"
                },
                "lastName": {
                    "type": "string"
                },
                "partnerShip": {
                    "type": "string"
                },
                "passwordChangedAt": {
                    "type": "string"
                },
                "phone": {
                    "type": "string"
                },
                "phoneVerified": {
                    "type": "boolean"
                },
                "registerType": {
                    "$ref": "#/definitions/user.RegisterType"
                },
                "role": {
                    "$ref": "#/definitions/role.Role"
                },
                "role_id": {
                    "type": "integer"
                },
                "socialEmail": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "stripeCustomerID": {
                    "type": "string"
                },
                "trailer": {
                    "type": "string"
                },
                "userSettings": {
                    "$ref": "#/definitions/model.UserSettings"
                },
                "username": {
                    "type": "string"
                },
                "wallet": {
                    "type": "number"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "Type \"Bearer\" followed by a space and JWT token.",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}